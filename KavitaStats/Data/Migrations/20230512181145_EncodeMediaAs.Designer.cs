// <auto-generated />
using System;
using KavitaStats.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KavitaStats.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230512181145_EncodeMediaAs")]
    partial class EncodeMediaAs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("KavitaStats.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("KavitaStats.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("KavitaStats.Entities.AppUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("KavitaStats.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("StatRecordId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StatRecordId");

                    b.ToTable("Color");
                });

            modelBuilder.Entity("KavitaStats.Entities.FileFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Extension")
                        .HasColumnType("TEXT");

                    b.Property<int>("Format")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StatRecordId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StatRecordId");

                    b.ToTable("FileFormat");
                });

            modelBuilder.Entity("KavitaStats.Entities.MangaReaderLayoutMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReaderMode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StatRecordId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StatRecordId");

                    b.ToTable("MangaReaderLayoutMode");
                });

            modelBuilder.Entity("KavitaStats.Entities.PageSplit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PageSplitOption")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StatRecordId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StatRecordId");

                    b.ToTable("PageSplit");
                });

            modelBuilder.Entity("KavitaStats.Entities.StatRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActiveSiteTheme")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("DotnetVersion")
                        .HasColumnType("TEXT");

                    b.Property<int>("EncodeMediaAs")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasBookmarks")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InstallId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDocker")
                        .HasColumnType("INTEGER");

                    b.Property<string>("KavitaVersion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("MangaReaderMode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxChaptersInASeries")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxSeriesInALibrary")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxVolumesInASeries")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumOfCores")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfCollections")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfLibraries")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfReadingLists")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfUsers")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OPDSEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OptedOut")
                        .HasColumnType("INTEGER");

                    b.Property<float>("PercentOfLibrariesIncludedInDashboard")
                        .HasColumnType("REAL");

                    b.Property<float>("PercentOfLibrariesIncludedInRecommended")
                        .HasColumnType("REAL");

                    b.Property<float>("PercentOfLibrariesIncludedInSearch")
                        .HasColumnType("REAL");

                    b.Property<float>("PercentOfLibrariesWithFolderWatchingEnabled")
                        .HasColumnType("REAL");

                    b.Property<bool>("StoreBookmarksAsWebP")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("StoreCoversAsWebP")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalFiles")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalGenres")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalPeople")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TotalReadingHours")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UpdateCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsersOnCardLayout")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsersOnListLayout")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsersWithEmulateComicBook")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UsingRestrictedProfiles")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UsingSeriesRelationships")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("StatRecord");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KavitaStats.Entities.AppUserRole", b =>
                {
                    b.HasOne("KavitaStats.Entities.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KavitaStats.Entities.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KavitaStats.Entities.Color", b =>
                {
                    b.HasOne("KavitaStats.Entities.StatRecord", "StatRecord")
                        .WithMany("MangaReaderBackgroundColors")
                        .HasForeignKey("StatRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StatRecord");
                });

            modelBuilder.Entity("KavitaStats.Entities.FileFormat", b =>
                {
                    b.HasOne("KavitaStats.Entities.StatRecord", null)
                        .WithMany("FileFormats")
                        .HasForeignKey("StatRecordId");
                });

            modelBuilder.Entity("KavitaStats.Entities.MangaReaderLayoutMode", b =>
                {
                    b.HasOne("KavitaStats.Entities.StatRecord", "StatRecord")
                        .WithMany("MangaReaderLayoutModes")
                        .HasForeignKey("StatRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StatRecord");
                });

            modelBuilder.Entity("KavitaStats.Entities.PageSplit", b =>
                {
                    b.HasOne("KavitaStats.Entities.StatRecord", "StatRecord")
                        .WithMany("MangaReaderPageSplittingModes")
                        .HasForeignKey("StatRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StatRecord");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("KavitaStats.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("KavitaStats.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("KavitaStats.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("KavitaStats.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KavitaStats.Entities.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("KavitaStats.Entities.AppUser", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("KavitaStats.Entities.StatRecord", b =>
                {
                    b.Navigation("FileFormats");

                    b.Navigation("MangaReaderBackgroundColors");

                    b.Navigation("MangaReaderLayoutModes");

                    b.Navigation("MangaReaderPageSplittingModes");
                });
#pragma warning restore 612, 618
        }
    }
}
