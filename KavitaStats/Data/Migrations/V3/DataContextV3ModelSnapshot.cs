// <auto-generated />
using System;
using KavitaStats.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KavitaStats.Data.Migrations.V3
{
    [DbContext(typeof(DataContextV3))]
    partial class DataContextV3ModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("KavitaStats.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("KavitaStats.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("KavitaStats.Entities.AppUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("KavitaStats.Entities.FileFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Extension")
                        .HasColumnType("TEXT");

                    b.Property<int>("Format")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LibraryStatId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LibraryStatId");

                    b.ToTable("FileFormat");
                });

            modelBuilder.Entity("KavitaStats.Entities.V3.LibraryStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CreateCollectionsFromMetadata")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CreateReadingListsFromMetadata")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IncludeInDashboard")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IncludeInSearch")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InstallId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastScanned")
                        .HasColumnType("TEXT");

                    b.Property<int>("LibraryType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfFolders")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UsingExcludePatterns")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UsingFolderWatching")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InstallId");

                    b.ToTable("LibraryStat");
                });

            modelBuilder.Entity("KavitaStats.Entities.V3.RelationshipStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InstallId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Relationship")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InstallId");

                    b.ToTable("RelationshipStat");
                });

            modelBuilder.Entity("KavitaStats.Entities.V3.ServerInfoV3", b =>
                {
                    b.Property<string>("InstallId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ActiveKavitaPlusSubscription")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DotnetVersion")
                        .HasColumnType("TEXT");

                    b.Property<int>("EncodeMediaAs")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("InitialInstallDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("InitialKavitaVersion")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDocker")
                        .HasColumnType("INTEGER");

                    b.Property<string>("KavitaVersion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastReadTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxChaptersInASeries")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxSeriesInALibrary")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxVolumesInASeries")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumOfCores")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfCollections")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfReadingLists")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OpdsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Os")
                        .HasColumnType("TEXT");

                    b.Property<string>("OsLocale")
                        .HasColumnType("TEXT");

                    b.Property<long>("TimeToOpeCbzMs")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TimeToOpenCbzPages")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TimeToPingKavitaStatsApi")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalFiles")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalGenres")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalLibraries")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalPeople")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalSeries")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UsingRestrictedProfiles")
                        .HasColumnType("INTEGER");

                    b.HasKey("InstallId");

                    b.ToTable("ServerInfoV3");
                });

            modelBuilder.Entity("KavitaStats.Entities.V3.UserAgeRestriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AgeRating")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IncludeUnknowns")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserStatId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserStatId")
                        .IsUnique();

                    b.ToTable("UserAgeRestriction");
                });

            modelBuilder.Entity("KavitaStats.Entities.V3.UserStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActiveTheme")
                        .HasColumnType("TEXT");

                    b.Property<int>("CollectionsCreatedCount")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("DevicePlatforms")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasAniListToken")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasMALToken")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasValidEmail")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InstallId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSharingReviews")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastReadTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Locale")
                        .HasColumnType("TEXT");

                    b.Property<float>("PercentageOfLibrariesHasAccess")
                        .HasColumnType("REAL");

                    b.Property<int>("ReadingListsCreatedCount")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("Roles")
                        .HasColumnType("TEXT");

                    b.Property<int>("SeriesBookmarksCreatedCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SmartFilterCreatedCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WantToReadSeriesCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InstallId");

                    b.ToTable("UserStat");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KavitaStats.Entities.AppUserRole", b =>
                {
                    b.HasOne("KavitaStats.Entities.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KavitaStats.Entities.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KavitaStats.Entities.FileFormat", b =>
                {
                    b.HasOne("KavitaStats.Entities.V3.LibraryStat", null)
                        .WithMany("FileTypes")
                        .HasForeignKey("LibraryStatId");
                });

            modelBuilder.Entity("KavitaStats.Entities.V3.LibraryStat", b =>
                {
                    b.HasOne("KavitaStats.Entities.V3.ServerInfoV3", "Server")
                        .WithMany("Libraries")
                        .HasForeignKey("InstallId");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("KavitaStats.Entities.V3.RelationshipStat", b =>
                {
                    b.HasOne("KavitaStats.Entities.V3.ServerInfoV3", "Server")
                        .WithMany("Relationships")
                        .HasForeignKey("InstallId");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("KavitaStats.Entities.V3.UserAgeRestriction", b =>
                {
                    b.HasOne("KavitaStats.Entities.V3.UserStat", "User")
                        .WithOne("AgeRestriction")
                        .HasForeignKey("KavitaStats.Entities.V3.UserAgeRestriction", "UserStatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KavitaStats.Entities.V3.UserStat", b =>
                {
                    b.HasOne("KavitaStats.Entities.V3.ServerInfoV3", "Server")
                        .WithMany("Users")
                        .HasForeignKey("InstallId");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("KavitaStats.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("KavitaStats.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("KavitaStats.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("KavitaStats.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KavitaStats.Entities.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("KavitaStats.Entities.AppUser", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("KavitaStats.Entities.V3.LibraryStat", b =>
                {
                    b.Navigation("FileTypes");
                });

            modelBuilder.Entity("KavitaStats.Entities.V3.ServerInfoV3", b =>
                {
                    b.Navigation("Libraries");

                    b.Navigation("Relationships");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("KavitaStats.Entities.V3.UserStat", b =>
                {
                    b.Navigation("AgeRestriction");
                });
#pragma warning restore 612, 618
        }
    }
}
